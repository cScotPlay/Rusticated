plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url 'https://jitpack.io' }
	maven { url "https://maven.shedaniel.me/" }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url "https://maven.shedaniel.me" }
	maven { url 'https://maven.blamejared.com' }
	maven {
		url "https://maven.parchmentmc.net/"
		content {
			includeGroup "org.parchmentmc.data"
		}
	}
	maven {
		// location of the maven that hosts JEI files
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
}

loom {

	accessWidenerPath = file("src/main/resources/rusticated.accesswidener")
	
    runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=rusticated"
 
			runDir "build/datagen"
		}
	}
}

// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "vazkii.patchouli:Patchouli:${project.patchouli_version}"

	// modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${project.wthit_version}"
	// modRuntimeOnly "mcp.mobius.waila:wthit:fabric-${project.wthit_version}"


	modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
	modRuntimeOnly "com.terraformersmc:modmenu:${project.modmenu_version}"

	if (project.runtime_itemlist_mod == "rei") {
		modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
		modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
		modRuntimeOnly "dev.architectury:architectury-fabric:6.2.43"
//		modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
//			exclude(group: "net.fabricmc.fabric-api")
	} else {
		modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
			exclude group: "net.fabricmc.fabric-api"
		}
	}

	if (project.runtime_itemlist_mod == "jei") {
		// compile against the JEI API but do not include it at runtime
		modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
		modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")
		// at runtime, use the full JEI jar for Fabric
		modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")
	} else {
		modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}") {
			exclude group: "mezz.jei"
		}
	}

	if (!(project.runtime_itemlist_mod in ["jei", "rei", "emi"])) {
		throw new GradleException("Invalid runtime_itemlist_mod value: " + project.runtime_itemlist_mod)
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}